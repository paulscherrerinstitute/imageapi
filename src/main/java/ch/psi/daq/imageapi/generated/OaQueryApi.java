/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ch.psi.daq.imageapi.generated;

import ch.psi.daq.imageapi.generated.QueryRequest;
import ch.psi.daq.imageapi.generated.QueryResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "oa_query", description = "the oa_query API")
public interface OaQueryApi {

    /**
     * POST /oa_query : Query data for a set of channels in a chosen time range.
     * further description...
     *
     * @param queryRequest Description of request body... (required)
     * @return A JSON array of user names (status code 200)
     */
    @ApiOperation(value = "Query data for a set of channels in a chosen time range.", nickname = "oaQueryPost", notes = "further description...", response = QueryResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A JSON array of user names", response = QueryResponse.class) })
    @RequestMapping(value = "/oa_query",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default Mono<ResponseEntity<QueryResponse>> _oaQueryPost(@ApiParam(value = "Description of request body..." ,required=true )  @Valid @RequestBody Mono<QueryRequest> queryRequest, ServerWebExchange exchange) {
        return oaQueryPost(queryRequest, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<QueryResponse>> oaQueryPost(Mono<QueryRequest> queryRequest, ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"channels\" : [ { \"channel\" : \"channel\", \"events\" : [ { \"shape\" : [ 5, 5 ], \"iocTs\" : 6, \"pulse\" : 1, \"ts\" : 0 }, { \"shape\" : [ 5, 5 ], \"iocTs\" : 6, \"pulse\" : 1, \"ts\" : 0 } ] }, { \"channel\" : \"channel\", \"events\" : [ { \"shape\" : [ 5, 5 ], \"iocTs\" : 6, \"pulse\" : 1, \"ts\" : 0 }, { \"shape\" : [ 5, 5 ], \"iocTs\" : 6, \"pulse\" : 1, \"ts\" : 0 } ] } ], \"something1\" : \"something1\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
